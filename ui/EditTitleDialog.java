
/*
 * EditTitleDialog.java
 * This class creates the dialog by which an Employee can edit the information
 * of a GeneralMovie that is already in the database.
 * @author Mitch
 * Created on Apr 12, 2011, 11:09:04 PM
 */

package ui;

import search.*;
import javax.swing.JOptionPane;
import java.util.GregorianCalendar;
import inventory.*;
import java.util.Calendar;
import java.text.DecimalFormat;

/**
 *
 * @author Kristan
 */
public class EditTitleDialog extends javax.swing.JDialog {

    /** Creates new form AddNewTitleDialog */
    public EditTitleDialog(java.awt.Frame parent, boolean modal, GeneralMovie movie) {
        super(parent, modal);
        this.movie = movie;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleTypeEditTitleLabel = new javax.swing.JLabel();
        yearTypeEditTitleLabel = new javax.swing.JLabel();
        infoTypeEditTitleLabel = new javax.swing.JLabel();
        titleEditTitleTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionEditTitleTextArea = new javax.swing.JTextArea();
        CancelEditTitleButton = new javax.swing.JButton();
        saveEditTitleButton = new javax.swing.JButton();
        genreTypeEditTitleLabel = new javax.swing.JLabel();
        producerTypeEditTitleLabel = new javax.swing.JLabel();
        actorTypeEditTitleLabel = new javax.swing.JLabel();
        studioTypeEditTitleLabel = new javax.swing.JLabel();
        ratingTypeEditTitleLabel = new javax.swing.JLabel();
        lengthTypeEditTitleLabel = new javax.swing.JLabel();
        directorEditTitleLabel = new javax.swing.JLabel();
        producerEditTitleTextField = new javax.swing.JTextField();
        directorEditTitleTextField = new javax.swing.JTextField();
        actorsEditTitleTextField = new javax.swing.JTextField();
        studioEditTitleTextField = new javax.swing.JTextField();
        lengthEditTitleTextField = new javax.swing.JTextField();
        skuEditTitleLabel = new javax.swing.JLabel();
        mediaTypeEditTitleLabel = new javax.swing.JLabel();
        skuEditTitleTextField = new javax.swing.JTextField();
        retailPriceEditTitleTextLabel = new javax.swing.JLabel();
        retailPriceEditTitleTextField = new javax.swing.JTextField();
        dollarSignEditTitleLabel = new javax.swing.JLabel();
        lengthLabelMinutesEditTitle = new javax.swing.JLabel();
        editTitleHeaderLabel = new javax.swing.JLabel();
        editTitleInstructionLabel = new javax.swing.JLabel();
        editTitleSuccessMessageLabel = new javax.swing.JLabel();
        editTitleGenreComboBox = new javax.swing.JComboBox();
        editTitleRatingComboBox = new javax.swing.JComboBox();
        editTitleFormatComboBox = new javax.swing.JComboBox();
        yearEditTitleTextField = new javax.swing.JTextField();
        editTitleEditAnotherMovieLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        titleTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        titleTypeEditTitleLabel.setText("Title");

        yearTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        yearTypeEditTitleLabel.setText("Year");

        infoTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        infoTypeEditTitleLabel.setText("Description");

        titleEditTitleTextField.setText(movie.getTitle());

        descriptionEditTitleTextArea.setColumns(20);
        descriptionEditTitleTextArea.setRows(5);
        descriptionEditTitleTextArea.setText(movie.getSynopsis());
        jScrollPane1.setViewportView(descriptionEditTitleTextArea);

        CancelEditTitleButton.setText("Cancel");
        CancelEditTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelEditTitleButtonActionPerformed(evt);
            }
        });

        saveEditTitleButton.setText("Save");
        saveEditTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEditTitleButtonActionPerformed(evt);
            }
        });

        genreTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        genreTypeEditTitleLabel.setText("Genre");

        producerTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        producerTypeEditTitleLabel.setText("Producer");

        actorTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        actorTypeEditTitleLabel.setText("Actors");

        studioTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        studioTypeEditTitleLabel.setText("Studio");

        ratingTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        ratingTypeEditTitleLabel.setText("Rating");

        lengthTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        lengthTypeEditTitleLabel.setText("Length");

        directorEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        directorEditTitleLabel.setText("Director");

        producerEditTitleTextField.setText(movie.getProducer());

        directorEditTitleTextField.setText(movie.getDirector());

        String[] actors = movie.getActors();
        String actorsString = actors[0];
        for (int i = 1; i < actors.length; i++)
        {
            actorsString += ", ";
            actorsString += actors[i];
        }
        actorsEditTitleTextField.setText(actorsString);

        studioEditTitleTextField.setText(movie.getStudio());

        lengthEditTitleTextField.setText(""+movie.getLength());

        skuEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        skuEditTitleLabel.setText("SKU");

        mediaTypeEditTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        mediaTypeEditTitleLabel.setText("Media Type");

        skuEditTitleTextField.setText(movie.getSKU());
        skuEditTitleTextField.setEditable(false);

        retailPriceEditTitleTextLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        retailPriceEditTitleTextLabel.setText("Retail Price");

        double priceInDollars = (double) movie.getRetailPriceInCents();
        priceInDollars /= 100;
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        retailPriceEditTitleTextField.setText(decimalFormat.format(priceInDollars));

        dollarSignEditTitleLabel.setText("$");

        lengthLabelMinutesEditTitle.setText("minutes");

        editTitleHeaderLabel.setFont(new java.awt.Font("Tahoma", 0, 24));
        editTitleHeaderLabel.setText("Edit a movie");

        editTitleInstructionLabel.setText("Change the appropriate fields and click the Save button to commit your changes.");

        editTitleSuccessMessageLabel.setVisible(false);
        editTitleSuccessMessageLabel.setText("Movie name () successfully added.");

        Genres dbGenre = Genres.getInstance();
        String[] genreComboBoxItems = dbGenre.getGenres();
        editTitleGenreComboBox.setSelectedItem(movie.getGenre());
        editTitleGenreComboBox.setModel(new javax.swing.DefaultComboBoxModel(genreComboBoxItems));

        Ratings dbRatings = Ratings.getInstance();
        String[] ratings = dbRatings.getRatings();
        editTitleRatingComboBox.setModel(new javax.swing.DefaultComboBoxModel(ratings));
        editTitleRatingComboBox.setSelectedItem(movie.getRating());

        Formats dbFormats = Formats.getInstance();
        String[] comboBoxItems = dbFormats.getFormats();
        editTitleFormatComboBox.setSelectedItem(movie.getFormat());
        editTitleFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxItems));

        yearEditTitleTextField.setText(""+movie.getReleaseDate().get(Calendar.YEAR));
        yearEditTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearEditTitleTextFieldActionPerformed(evt);
            }
        });

        editTitleEditAnotherMovieLabel.setVisible(false);
        editTitleEditAnotherMovieLabel.setText("You may add another movie.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(editTitleHeaderLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(editTitleInstructionLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(titleTypeEditTitleLabel)
                        .addGap(95, 95, 95)
                        .addComponent(titleEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(yearTypeEditTitleLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(directorEditTitleLabel)
                        .addGap(74, 74, 74)
                        .addComponent(directorEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(actorTypeEditTitleLabel)
                        .addGap(83, 83, 83)
                        .addComponent(actorsEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lengthTypeEditTitleLabel)
                        .addGap(81, 81, 81)
                        .addComponent(lengthEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lengthLabelMinutesEditTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(retailPriceEditTitleTextLabel)
                        .addGap(66, 66, 66)
                        .addComponent(dollarSignEditTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(retailPriceEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(infoTypeEditTitleLabel)
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(saveEditTitleButton)
                        .addGap(33, 33, 33)
                        .addComponent(CancelEditTitleButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(producerTypeEditTitleLabel)
                            .addComponent(genreTypeEditTitleLabel))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(producerEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(yearEditTitleTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(editTitleGenreComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 91, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studioTypeEditTitleLabel)
                            .addComponent(ratingTypeEditTitleLabel))
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editTitleRatingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studioEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(skuEditTitleLabel)
                            .addComponent(mediaTypeEditTitleLabel))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editTitleFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(skuEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editTitleEditAnotherMovieLabel)
                            .addComponent(editTitleSuccessMessageLabel))))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(editTitleHeaderLabel)
                .addGap(14, 14, 14)
                .addComponent(editTitleInstructionLabel)
                .addGap(6, 6, 6)
                .addComponent(editTitleSuccessMessageLabel)
                .addGap(5, 5, 5)
                .addComponent(editTitleEditAnotherMovieLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleTypeEditTitleLabel)
                    .addComponent(titleEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(skuEditTitleLabel)
                    .addComponent(skuEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mediaTypeEditTitleLabel)
                    .addComponent(editTitleFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearTypeEditTitleLabel)
                    .addComponent(yearEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreTypeEditTitleLabel)
                    .addComponent(editTitleGenreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(producerTypeEditTitleLabel)
                    .addComponent(producerEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directorEditTitleLabel)
                    .addComponent(directorEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actorTypeEditTitleLabel)
                    .addComponent(actorsEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studioTypeEditTitleLabel)
                    .addComponent(studioEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ratingTypeEditTitleLabel)
                    .addComponent(editTitleRatingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lengthTypeEditTitleLabel)
                    .addComponent(lengthEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengthLabelMinutesEditTitle))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(retailPriceEditTitleTextLabel)
                    .addComponent(dollarSignEditTitleLabel)
                    .addComponent(retailPriceEditTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoTypeEditTitleLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveEditTitleButton)
                    .addComponent(CancelEditTitleButton))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method hides the dialog from view, if the user has hit the
     * cancel button.
     * @param evt
     */
    private void CancelEditTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelEditTitleButtonActionPerformed
        //this.setVisible(false);
        dispose();
    }//GEN-LAST:event_CancelEditTitleButtonActionPerformed

    
    
    /**
     * This method takes the information from the fields and creates a new
     * GeneralMovie, inserting into the tables videoInfo, and physicalVideo
     * in the database
     * @param evt
     */
    private void saveEditTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEditTitleButtonActionPerformed
        try
        {
            String title = titleEditTitleTextField.getText();
            if (title == null || title.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a title");
            }
            else
            {
                title = title.trim();
            }
            
            String SKU = skuEditTitleTextField.getText();
            if (SKU == null || SKU.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a SKU");                
            }
            else
            {
                SKU = SKU.trim();
            }
            
            String format = (String) editTitleFormatComboBox.getSelectedItem();
            if (format == null || format.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a format");
                
            }
            else
            {
                format = format.trim();
            }
            
            String yearString = yearEditTitleTextField.getText();
            if (yearString == null || format.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a year");
            }
            else
            {
                yearString = yearString.trim();
            }
            int year = 0;
            try
            {
                year = Integer.parseInt(yearString);
            }
            catch (NumberFormatException e)
            {
                throw new IllegalArgumentException("Please enter a valid year");
            }
            GregorianCalendar releaseDate = new GregorianCalendar(year,1,1);
            
//            String genre = genreAddNewTitleTextField.getText();
//            if (genre == null || genre.trim().length() < 1)
//            {
//
//                throw new IllegalArgumentException("Please enter a genre");
//            }
//            else
//            {
//                genre = genre.trim();
//            }
            String genre = (String) editTitleGenreComboBox.getSelectedItem();
            
            
            
            
            String producer = producerEditTitleTextField.getText();
            if (producer == null || producer.trim().length() < 1)
            {
                
                throw new IllegalArgumentException("Please enter a producer");
            }
            else
            {
                producer = producer.trim();
            }
            
            String director = directorEditTitleTextField.getText();
            if (director == null || director.trim().length() < 1)
            {
                
                throw new IllegalArgumentException("Please enter a director");
            }
            else
            {
                director = director.trim();
            }
            
            
            String actors = actorsEditTitleTextField.getText();
            String[] potentialActors =  actors.split(",");
            int numValidActors = 0;
            for (int i = 0; i < potentialActors.length; i++)
            {
                if (potentialActors[i] != null && potentialActors[i].trim().length() > 0)
                {
                    potentialActors[i] = potentialActors[i].trim();
                    numValidActors++;
                }
                else
                {
                    potentialActors[i] = null;
                }
            }
            if (numValidActors == 0)
            {
                
                throw new IllegalArgumentException("Please enter actors, separated by only one comma");
            }
            String[] validActors = new String[numValidActors];
            int validActorsIndex = 0;
            for (int i = 0; i < potentialActors.length; i++)
            {
                if (potentialActors[i] != null)
                {
                    validActors[validActorsIndex] = potentialActors[i];
                    validActorsIndex++;
                }
            }
            
            String studio = studioEditTitleTextField.getText();
            if (studio == null || studio.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a studio");

            }
            else
            {
                studio = studio.trim();
            }
//            String rating = ratingAddNewTitleTextField.getText();
//            if (rating == null || rating.trim().length() < 1)
//            {
//
//                throw new IllegalArgumentException("Please enter a rating");
//            }
//            else
//            {
//                rating = rating.trim();
//            }

            String rating = (String) editTitleRatingComboBox.getSelectedItem();
            
            int length = 0;
            String lengthString = lengthEditTitleTextField.getText();
            if (lengthString == null || lengthString.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a length.");
            }
            try
            {   
                lengthString = lengthString.trim();
                java.math.BigInteger bigLength = new java.math.BigInteger(lengthString);
                if (bigLength.compareTo(new java.math.BigInteger("" + Integer.MAX_VALUE)) == 1)
                {
                    throw new IllegalArgumentException("Number is too large.  Please enter a smaller number.");
                }
                length = Integer.parseInt(lengthString);
            }
            catch (NumberFormatException exception)
            {
                throw new IllegalArgumentException("Length must be a whole number.  Please only enter digits");
            }

            
            String retailPriceInDollarsString = retailPriceEditTitleTextField.getText();
            if (retailPriceInDollarsString == null || retailPriceInDollarsString.trim().length() < 1)
            {
                throw new IllegalArgumentException("Please enter a price");

            }
            else
            {
                retailPriceInDollarsString = retailPriceInDollarsString.trim();
            }
            
            int retailPriceInCents = 0;
            final int DOLLARS_FIELD = 0;
            final int CENTS_FIELD = 1;

            String[] splitRetailPriceInDollars = retailPriceInDollarsString.split("\\.");
            if (splitRetailPriceInDollars.length > 2)   // more . than dollars and cents
            {
                throw new IllegalArgumentException("You may only enter up to one decimal point");
            }
            if (splitRetailPriceInDollars.length < 2)
            {
                splitRetailPriceInDollars = new String[2];
                splitRetailPriceInDollars[DOLLARS_FIELD] = retailPriceInDollarsString;
                splitRetailPriceInDollars[CENTS_FIELD] = "0";
            }
            if (splitRetailPriceInDollars[CENTS_FIELD].length() > 2)
            {
                throw new IllegalArgumentException("You are limited to two digits for cents");
            }
            try
            {
                java.math.BigInteger dollars = new java.math.BigInteger(splitRetailPriceInDollars[DOLLARS_FIELD]);
                if (dollars.compareTo(new java.math.BigInteger("" + Integer.MAX_VALUE)) == 1)
                {
                    throw new IllegalArgumentException("Number is too large.  Please enter a smaller number.");
                }
                retailPriceInCents = Integer.parseInt(splitRetailPriceInDollars[DOLLARS_FIELD]) * 100;
                retailPriceInCents += Integer.parseInt(splitRetailPriceInDollars[CENTS_FIELD]);
            }
            catch (NumberFormatException exception)
            {
                throw new IllegalArgumentException("Retail price is a number.  Please enter only digits and one decimal point");
            }

            String synopsis = descriptionEditTitleTextArea.getText();
            if (synopsis == null || synopsis.trim().length() < 1)
            {
                
                throw new IllegalArgumentException("Please enter a synopsis");
            }
            else
            {
                synopsis = synopsis.trim();
            }
            

            /*
             * signature of editInfo
             * public void editInfo(
             String SKU,
            String title,
            String[] actors,
            String director,
            String producer,
            GregorianCalendar releaseDate,
            String synopsis,
            String genre,
	    String rating,
            String studio,
            int retailPrice,
            String format,
            int runtime) throws SQLException, MissingFieldException
             */

            MovieManagement movieManagement = new MovieManagement();
            movieManagement.editInfo(SKU, title, validActors, director, producer, releaseDate, synopsis, genre, rating, studio, retailPriceInCents, format, length);
            JOptionPane.showMessageDialog(null, "Movie '"+title+"' ("+SKU+") successfully edited.", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            /*editTitleSuccessMessageLabel.setText("Movie '"+title+"' ("+SKU+") successfully edited.  You may edit another movie.");
            actorsEditTitleTextField.setText("");
            directorEditTitleTextField.setText("");
            skuEditTitleTextField.setText("");
            titleEditTitleTextField.setText("");
            producerEditTitleTextField.setText("");
            descriptionEditTitleTextArea.setText("");
            //genreAddNewTitleTextField.setText("");
            //ratingAddNewTitleTextField.setText("");
            studioEditTitleTextField.setText("");
            retailPriceEditTitleTextField.setText("");
            //mediaTypeAddNewTitleTextField.setText("");
            yearEditTitleTextField.setText("");
            lengthEditTitleTextField.setText("");
            editTitleSuccessMessageLabel.setVisible(true);
            editTitleEditAnotherMovieLabel.setVisible(true);*/
            dispose();
            
        } // end try
        catch (Exception exception)
        {
            JOptionPane.showMessageDialog(null, exception.getMessage(), "Please correct the following input", JOptionPane.ERROR_MESSAGE);
            //exception.printStackTrace(); // TODO: take this out owhen debugging is over
        }
    }//GEN-LAST:event_saveEditTitleButtonActionPerformed

    private void yearEditTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearEditTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearEditTitleTextFieldActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // TESTING************************************
                GeneralMovie movie = null;
                try
                {
                    String SKU = JOptionPane.showInputDialog(null, "Enter the SKU for the movie you want to edit", "Edit Title", JOptionPane.OK_OPTION);
                    movie = Search.previewMovie(SKU);
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "An error occurred", JOptionPane.ERROR_MESSAGE);
                    System.exit(1);
                }
                // END TESTING************************************

                EditTitleDialog dialog = new EditTitleDialog(new javax.swing.JFrame(), true, movie);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelEditTitleButton;
    private javax.swing.JLabel actorTypeEditTitleLabel;
    private javax.swing.JTextField actorsEditTitleTextField;
    private javax.swing.JTextArea descriptionEditTitleTextArea;
    private javax.swing.JLabel directorEditTitleLabel;
    private javax.swing.JTextField directorEditTitleTextField;
    private javax.swing.JLabel dollarSignEditTitleLabel;
    private javax.swing.JLabel editTitleEditAnotherMovieLabel;
    private javax.swing.JComboBox editTitleFormatComboBox;
    private javax.swing.JComboBox editTitleGenreComboBox;
    private javax.swing.JLabel editTitleHeaderLabel;
    private javax.swing.JLabel editTitleInstructionLabel;
    private javax.swing.JComboBox editTitleRatingComboBox;
    private javax.swing.JLabel editTitleSuccessMessageLabel;
    private javax.swing.JLabel genreTypeEditTitleLabel;
    private javax.swing.JLabel infoTypeEditTitleLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lengthEditTitleTextField;
    private javax.swing.JLabel lengthLabelMinutesEditTitle;
    private javax.swing.JLabel lengthTypeEditTitleLabel;
    private javax.swing.JLabel mediaTypeEditTitleLabel;
    private javax.swing.JTextField producerEditTitleTextField;
    private javax.swing.JLabel producerTypeEditTitleLabel;
    private javax.swing.JLabel ratingTypeEditTitleLabel;
    private javax.swing.JTextField retailPriceEditTitleTextField;
    private javax.swing.JLabel retailPriceEditTitleTextLabel;
    private javax.swing.JButton saveEditTitleButton;
    private javax.swing.JLabel skuEditTitleLabel;
    private javax.swing.JTextField skuEditTitleTextField;
    private javax.swing.JTextField studioEditTitleTextField;
    private javax.swing.JLabel studioTypeEditTitleLabel;
    private javax.swing.JTextField titleEditTitleTextField;
    private javax.swing.JLabel titleTypeEditTitleLabel;
    private javax.swing.JTextField yearEditTitleTextField;
    private javax.swing.JLabel yearTypeEditTitleLabel;
    // End of variables declaration//GEN-END:variables
    private GeneralMovie movie;
}
